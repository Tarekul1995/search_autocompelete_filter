{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","users","setUser","useEffect","a","axios","get","res","data","fetchUser","Container","Row","Col","itemToString","item","name","value","getInputProps","highlightedIndex","getMenuProps","isOpen","getItemProps","inputValue","FormControl","type","placeholder","className","ListGroup","style","maxHeight","overflowY","matchSorter","keys","map","user","index","Item","key","id","backgroundColor","username","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWA0DeA,MAnDf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,KAab,OARAC,oBAAU,YACO,sCAAG,4BAAAC,EAAA,qEACEC,IAAMC,IAAI,8CADZ,OACVC,EADU,OAEhBL,EAAQK,EAAIC,MAFI,yCAAH,qDAIfC,IACA,IAGF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACA,kBAAC,IAAD,CAAWC,aAAc,SAACC,GAAD,OAAQA,EAAOA,EAAKC,KAAO,KAEhD,gBAjBaC,EAiBXC,EAAF,EAAEA,cAAcC,EAAhB,EAAgBA,iBAAiBC,EAAjC,EAAiCA,aAAaC,EAA9C,EAA8CA,OAAOC,EAArD,EAAqDA,aAAaC,EAAlE,EAAkEA,WAAlE,OACE,6BACE,kBAACC,EAAA,EAAD,iBAAiBN,IAAjB,CAAkCO,KAAK,OAAOC,YAAY,SAASC,UAAU,kBAC7E,kBAACC,EAAA,EAAcR,EAAa,CAC1BS,MAAM,CACJC,UAAU,IACVC,UAAU,YAIVV,GA3BKJ,EA2BiBM,EA3BRN,EAAQe,YAAY9B,EAAMe,EAAM,CAACgB,KAAK,CAAC,OAAO,cAAgB/B,GA2B1CgC,IAAI,SAACC,EAAKC,GAAN,OACpC,kBAACR,EAAA,EAAUS,KAASf,EAAa,CAC/BP,KAAKoB,EAAKG,IAAIH,EAAKI,GAAGV,MAAM,CAC1BW,gBACEJ,IAAUjB,EAAmB,UAAY,QAE1CgB,EAAKnB,KALV,IAKiBmB,EAAKM,SALtB,OAMG,UAQjB,kBAAC5B,EAAA,EAAD,SCxCc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.18774d29.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport { ListGroup,Container,Row,Col,FormControl } from \"react-bootstrap\";\nimport Downshift from 'downshift'\nimport matchSorter from 'match-sorter'\nimport axios from \"axios\";\n\n\nfunction App() {\n\n  const [users,setUser] = useState([]);\n  const getMatchUser = value => value ? matchSorter(users,value,{keys:['name','username']}) : users\n\n  useEffect(()=>{\n    const fetchUser = async () =>{\n      const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n      setUser(res.data)\n    }\n    fetchUser()\n  },[])  \n\n  return (\n  <Container>\n    <Row>\n      <Col></Col>\n      <Col>\n      <Downshift itemToString={(item)=>item ? item.name : ''}>\n        {\n          ({getInputProps,highlightedIndex,getMenuProps,isOpen,getItemProps,inputValue})=>(\n            <div>\n              <FormControl {...getInputProps()} type=\"text\" placeholder=\"Search\" className=\"mr-sm-2 mt-5\" />\n              <ListGroup {...getMenuProps({\n                style:{\n                  maxHeight:200,\n                  overflowY:'scroll'\n                }\n              })}>\n                {\n                  isOpen ? getMatchUser(inputValue).map((user,index)=>(\n                    <ListGroup.Item {...getItemProps({\n                      item:user,key:user.id,style:{\n                        backgroundColor:\n                          index === highlightedIndex ? '#6682E7' : null,\n                      },\n                    })}>{user.name}({user.username})</ListGroup.Item>\n                  )) : null\n                }\n              </ListGroup>\n            </div>\n          )\n        }\n      </Downshift>\n      </Col>\n      <Col></Col>\n    </Row>\n  </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}